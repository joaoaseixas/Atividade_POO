@using GerenciamentoPedidos.Models
@inject ProdutoService ProdutoSvc
@using Microsoft.AspNetCore.Components.Forms

<EditForm Model="Item" OnValidSubmit="HandleValid">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Produto -->
    <div class="mb-3">
        <label class="form-label">Produto</label>
        <InputSelect TValue="int"
                     @bind-Value="selectedProdutoId"
                     class="form-select">
            <option value="">-- selecione --</option>
            @foreach (var p in produtos)
            {
                <option value="@p.Id">@p.Nome</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => selectedProdutoId)" />
    </div>

    <!-- Preço Unitário -->
    <div class="mb-3">
        <label class="form-label">Preço Unit. (R$)</label>
        <InputNumber TValue="decimal"
                     @bind-Value="Item.Produto.Preco"
                     @bind-Value:event="oninput"
                     class="form-control"
                     step="0.01" />
        <ValidationMessage For="@(() => Item.Produto.Preco)" />
    </div>

    <!-- Quantidade -->
    <div class="mb-3">
        <label class="form-label">Quantidade</label>
        <InputNumber TValue="int"
                     @bind-Value="Item.Quantidade"
                     @bind-Value:event="oninput"
                     class="form-control" />
        <ValidationMessage For="@(() => Item.Quantidade)" />
    </div>

    <!-- Ações -->
    <div class="d-flex gap-2">
        <button type="submit" class="btn btn-success">Adicionar</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancelar</button>
    </div>
</EditForm>

@code {
    [Parameter] public EventCallback<ItemPedido> OnAdd { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private ItemPedido Item { get; set; } = new();
    private List<Produto> produtos = new();

    // substitua o campo por esta propriedade com lógica no setter
    private int selectedProdutoId
    {
        get => _selectedProdutoId;
        set
        {
            if (value != _selectedProdutoId)
            {
                _selectedProdutoId = value;
                // atualiza o produto do Item automaticamente
                var prod = produtos.FirstOrDefault(p => p.Id == value);
                if (prod != null)
                    Item.Produto = prod;
            }
        }
    }
    private int _selectedProdutoId;

    protected override async Task OnInitializedAsync()
      => produtos = await ProdutoSvc.ObterTodosProdutos();

    private async Task HandleValid()
    {
        await OnAdd.InvokeAsync(Item);
        // reseta o form
        Item = new();
        _selectedProdutoId = 0;
    }

    private Task Cancel()
      => OnCancel.InvokeAsync();
}
