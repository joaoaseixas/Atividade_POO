@using GerenciamentoPedidos.Models

<table class="table">
    <thead>
        <tr>
            <th>Produto</th>
            <th>Qtd</th>
            <th>Preço Unit.</th>
            <th>Subtotal</th>
            <th>Ações</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Itens)
        {
            <tr>
                <td>@item.Produto.Nome</td>
                <td>@item.Quantidade</td>
                <td>@item.Produto.Preco.ToString("C")</td>
                <td>@item.Subtotal.ToString("C")</td>
                <td>
                    <button class="btn btn-sm btn-danger"
                            @onclick="() => OnRemove.InvokeAsync(item)">
                        Remover
                    </button>
                </td>
            </tr>
        }
        @if (!Itens.Any())
        {
            <tr>
                <td colspan="5" class="text-center text-muted">Nenhum item adicionado.</td>
            </tr>
        }
    </tbody>
</table>

<div class="mb-3">
    <button class="btn btn-outline-primary" @onclick="AbrirForm">
        Adicionar Item
    </button>
</div>

@if (ShowForm)
{
    <div class="card card-body mb-3">
        <FormularioItemPedido OnAdd="Adicionar"
                              OnCancel="FecharForm" />
    </div>
}

<p><strong>Total:</strong> @Itens.Sum(x => x.Subtotal).ToString("C")</p>

@code {
    [Parameter] public List<ItemPedido> Itens { get; set; } = new();
    [Parameter] public EventCallback<ItemPedido> OnAdd { get; set; }
    [Parameter] public EventCallback<ItemPedido> OnRemove { get; set; }

    private bool ShowForm;
    private int _prevCount;

    protected override void OnParametersSet()
    {
        _prevCount = Itens.Count;
    }

    protected override bool ShouldRender()
    {
        var hasChanged = (_prevCount != Itens.Count) || ShowForm;
        return hasChanged;
    }

    private Task AbrirForm()
    {
        ShowForm = true;
        return Task.CompletedTask;
    }

    private Task FecharForm()
    {
        ShowForm = false;
        return Task.CompletedTask;
    }

    private async Task Adicionar(ItemPedido item)
    {
        ShowForm = false;
        await OnAdd.InvokeAsync(item);
    }
}
