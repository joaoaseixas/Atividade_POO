@page "/"
@page "/gerenciar-pedidos"

@using GerenciamentoPedidos.Models
@inject PedidoService PedidoSvc
@inject ClienteService ClienteSvc
@inject NotificationService Notifier

<h3>Gerenciamento de Pedidos</h3>
<NotificationComponent />

<div class="filters">
    <select class="form-select" @bind="filterClienteId">
        <option value="0">Todos Clientes</option>
        @foreach (var c in clientes)
        {
            <option value="@c.Id">@c.Nome</option>
        }
    </select>

    <select class="form-select" @bind="filterStatus">
        <option value="">Todos Status</option>
        <option>Pendente</option>
        <option>Processando</option>
        <option>Concluído</option>
        <option>Cancelado</option>
    </select>

    <button class="btn btn-primary" @onclick="NewPedido">Novo Pedido</button>
</div>

<table class="table table-hover">
    <thead>
        <tr>
            <th>Id</th>
            <th>Cliente</th>
            <th>Data</th>
            <th>Total</th>
            <th>Status</th>
            <th>Ações</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var p in pagedPedidos)
        {
            <tr>
                <td>@p.Id</td>
                <td>@p.Cliente.Nome</td>
                <td>@p.DataPedido.ToString("dd/MM/yyyy HH:mm")</td>
                <td>@p.Total.ToString("C")</td>
                <td>@p.Status</td>
                <td>
                    <button class="btn btn-sm btn-info me-1"
                            @onclick="() => Editar(p.Id)">
                        Editar
                    </button>
                    <button class="btn btn-sm btn-danger"
                            @onclick="() => ConfirmarRemover(p.Id)">
                        Remover
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<nav>
    <ul class="pagination">
        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="PrevPage">Anterior</button>
        </li>
        <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
            <button class="page-link" @onclick="NextPage">Próximo</button>
        </li>
    </ul>
</nav>

<ConfirmacaoModal Show="showModal"
                  Title="Remover Pedido"
                  Message="Confirma remoção do pedido?"
                  OnConfirm="RemoverPedido"
                  OnClose="OnModalClose" />

@if (editingPedido is not null)
{
    <FormularioPedido Pedido="editingPedido"
                      OnCancel="CancelEdit"
                      OnSave="SavePedido" />
}

@code {
    List<Pedido> pedidos = new();
    List<Cliente> clientes = new();
    Pedido? editingPedido;
    bool showModal;
    int pedidoToRemove, filterClienteId, currentPage = 1;
    string filterStatus = "";
    const int pageSize = 5;

    private bool _firstRender = true;

    protected override async Task OnInitializedAsync()
    {
        pedidos = await PedidoSvc.ObterTodosPedidos();
        clientes = await ClienteSvc.ObterTodosClientes();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _firstRender)
        {
            _firstRender = false;
            // inicialize JS externos aqui, se precisar
        }
        return Task.CompletedTask;
    }

    void NewPedido() => editingPedido = new Pedido();
    void Editar(int id) => editingPedido = pedidos.First(p => p.Id == id);
    void ConfirmarRemover(int id) { pedidoToRemove = id; showModal = true; }
    Task OnModalClose(bool _) { showModal = false; return Task.CompletedTask; }

    async Task RemoverPedido()
    {
        await PedidoSvc.RemoverPedido(pedidoToRemove);
        pedidos = await PedidoSvc.ObterTodosPedidos();
        Notifier.Notify("Pedido removido", "warning");
        showModal = false;
    }

    void CancelEdit() => editingPedido = null;

    async Task SavePedido(Pedido p)
    {
        if (p.Id == 0) await PedidoSvc.AdicionarPedido(p);
        else await PedidoSvc.AtualizarPedido(p);
        pedidos = await PedidoSvc.ObterTodosPedidos();
        Notifier.Notify("Pedido salvo");
        editingPedido = null;
    }

    List<Pedido> filteredPedidos => pedidos
      .Where(p => (filterClienteId == 0 || p.Cliente.Id == filterClienteId)
               && (string.IsNullOrEmpty(filterStatus) || p.Status == filterStatus))
      .ToList();

    List<Pedido> pagedPedidos => filteredPedidos
      .Skip((currentPage - 1) * pageSize)
      .Take(pageSize)
      .ToList();

    int totalPages => (int)Math.Ceiling(filteredPedidos.Count / (double)pageSize);

    void PrevPage() { if (currentPage > 1) currentPage--; }
    void NextPage() { if (currentPage < totalPages) currentPage++; }
}
